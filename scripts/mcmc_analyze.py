"""`mcmc_analysis.py`

This script is used to analyze results generated by mcmc.py.
Requires a base_directory containing an `mcmc` subdirectory with MCMC results.
Generates several types of plots and analysis in the base directory / `mcmc_analysis`

# Standard MCMC analyses
- Traces for each parameter
- Corner plot (if sufficient samples)

# Prediction plots with 50 and 90% credible intervals
- Ion velocity across pressures
- Ion current density across pressures
- Thrust vs pressure
- Discharge current vs pressure
- Cathode coupling voltage vs pressure

# Restarts and others
- MAP, mean, median, final parameters
- Empirical covariance

For usage details and a full list of options , run 'pdm run scripts/mcmc_analysis.py --help'

"""  # noqa: E501

import argparse
import os
from pathlib import Path

import pem_mcmc as mcmc

parser = argparse.ArgumentParser("MCMC analysis")

parser.add_argument("path", type=str, help="the path to the directory containing the mcmc data")

parser.add_argument(
    "--datasets",
    type=str,
    nargs="+",
    default=["diamant2014", "macdonald2019"],
    help="A list of datasets to use, pick from [diamant2014, macdonald2019, sankovic1993]",
)

parser.add_argument("--plot-corner", action="store_true")

parser.add_argument("--plot-bands", action="store_true")

parser.add_argument("--plot-traces", action="store_true")

parser.add_argument("--plot-map", action="store_true")

parser.add_argument("--calc-metrics", action="store_true")

parser.add_argument("--subsample", type=int)

parser.add_argument("--burn-fraction", type=float, default=0.0)

parser.add_argument(
    "--limits",
    type=str,
    choices=["prior", "posterior", "test"],
    default="posterior",
    help="Which set of device-specific axis-limits to use.",
)


def main(args):
    config_file = ""
    for file in os.listdir(args.path):
        if file.endswith(".yml") or file.endswith(".yaml"):
            config_file = file

    if config_file == "":
        raise FileNotFoundError(f"No YAML file found in {args.path}.")

    mcmc.analyze(
        Path(args.path),
        Path(config_file),
        args.datasets,
        plot_corner=args.plot_corner,
        plot_bands=args.plot_bands,
        plot_traces=args.plot_traces,
        plot_map=args.plot_map,
        calc_metrics=args.calc_metrics,
        subsample=args.subsample,
        limits=args.limits,
    )


if __name__ == "__main__":
    args = parser.parse_args()
    main(args)
